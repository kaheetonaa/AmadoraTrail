{
  "version": 3,
  "sources": ["../../ol/format/OSMXML.js"],
  "sourcesContent": ["/**\n * @module ol/format/OSMXML\n */\n// FIXME add typedef for stack state objects\nimport Feature from '../Feature.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport XMLFeature from './XMLFeature.js';\nimport {extend} from '../array.js';\nimport {get as getProjection} from '../proj.js';\nimport {isEmpty} from '../obj.js';\nimport {makeStructureNS, pushParseAndPop} from '../xml.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @const\n * @type {Array<null>}\n */\nconst NAMESPACE_URIS = [null];\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst WAY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'nd': readNd,\n  'tag': readTag,\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'node': readNode,\n  'way': readWay,\n});\n\n/**\n * @classdesc\n * Feature format for reading data in the\n * [OSMXML format](https://wiki.openstreetmap.org/wiki/OSM_XML).\n *\n * @api\n */\nclass OSMXML extends XMLFeature {\n  constructor() {\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @override\n   */\n  readFeaturesFromNode(node, options) {\n    options = this.getReadOptions(node, options);\n    if (node.localName == 'osm') {\n      const state = pushParseAndPop(\n        {\n          nodes: {},\n          ways: [],\n          features: [],\n        },\n        PARSERS,\n        node,\n        [options],\n      );\n      // parse nodes in ways\n      for (let j = 0; j < state.ways.length; j++) {\n        const values = /** @type {Object} */ (state.ways[j]);\n        /** @type {Array<number>} */\n        const flatCoordinates = values.flatCoordinates;\n        if (!flatCoordinates.length) {\n          for (let i = 0, ii = values.ndrefs.length; i < ii; i++) {\n            const point = state.nodes[values.ndrefs[i]];\n            extend(flatCoordinates, point);\n          }\n        }\n        let geometry;\n        if (values.ndrefs[0] == values.ndrefs[values.ndrefs.length - 1]) {\n          // closed way\n          geometry = new Polygon(flatCoordinates, 'XY', [\n            flatCoordinates.length,\n          ]);\n        } else {\n          geometry = new LineString(flatCoordinates, 'XY');\n        }\n        transformGeometryWithOptions(geometry, false, options);\n        const feature = new Feature(geometry);\n        if (values.id !== undefined) {\n          feature.setId(values.id);\n        }\n        feature.setProperties(values.tags, true);\n        state.features.push(feature);\n      }\n      if (state.features) {\n        return state.features;\n      }\n    }\n    return [];\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst NODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'tag': readTag,\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNode(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\n    objectStack[0]\n  );\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const id = node.getAttribute('id');\n  /** @type {import(\"../coordinate.js\").Coordinate} */\n  const coordinates = [\n    parseFloat(node.getAttribute('lon')),\n    parseFloat(node.getAttribute('lat')),\n  ];\n  state.nodes[id] = coordinates;\n\n  const values = pushParseAndPop(\n    {\n      tags: {},\n    },\n    NODE_PARSERS,\n    node,\n    objectStack,\n  );\n  if (!isEmpty(values.tags)) {\n    const geometry = new Point(coordinates);\n    transformGeometryWithOptions(geometry, false, options);\n    const feature = new Feature(geometry);\n    if (id !== undefined) {\n      feature.setId(id);\n    }\n    feature.setProperties(values.tags, true);\n    state.features.push(feature);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readWay(node, objectStack) {\n  const id = node.getAttribute('id');\n  const values = pushParseAndPop(\n    {\n      id: id,\n      ndrefs: [],\n      flatCoordinates: [],\n      tags: {},\n    },\n    WAY_PARSERS,\n    node,\n    objectStack,\n  );\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  state.ways.push(values);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNd(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.ndrefs.push(node.getAttribute('ref'));\n  if (node.hasAttribute('lon') && node.hasAttribute('lat')) {\n    values.flatCoordinates.push(parseFloat(node.getAttribute('lon')));\n    values.flatCoordinates.push(parseFloat(node.getAttribute('lat')));\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readTag(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.tags[node.getAttribute('k')] = node.getAttribute('v');\n}\n\nexport default OSMXML;\n"],
  "mappings": "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",
  "names": []
}
